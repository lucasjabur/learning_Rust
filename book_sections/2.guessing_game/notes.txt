/*

- Consider the code in the 'main.rs' file:

- FIRST PART!

use std::io;

fn main() {
    println!("Guess the number!");
    println!("Please input your guess!");

    let mut guess = String::new();

    io::stdin()
        .read_line(&mut guess)
        .expect("Failed to read line!");

    println!("You guessed: {guess}");
}

- 'std' it is the Rust's standard library.
- 'io' is a input/output library that comes from the 'std' library.
- To use it, you need to import: 'use std::io'. 
    -> By default, Rust has a set of items defined in the standard library that it brings into the scope of every program. This set is called the prelude, and you can see everything in it in the standard library documentation.
    -> If a type you want to use isn’t in the prelude, you have to bring that type into scope explicitly with a use statement. Using the std::io library provides you with a number of useful features, including the ability to accept user input.

- 'fn main()' creates the 'main()' function.

- 'println!' is a macro that prints in the screen the string passed as its parameter.

- To create a variable in Rust, it is used the command 'let mut <name> = <value>;'.
    -> In this case, 'let mut guess = String::new()'.
        -> It is important to notice that, in Rust, a variable is immutable. This means that 'let apples = 5' created a variable called 'apples' that is binded to the value '5', it cannot store another value but '5'. To create a mutable variable, it's needed to add to the command the word 'mut', such as used in the 'main.rs' code.
    -> The right side of the '=' sign, 'String::new' (a function that returns a new instance of a String), is the value bouded to the variable 'guess'. 
        -> 'String' is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text.
        -> The '::new' indicates that 'new' is an associated function of the 'String' type. An associated function is a function that is implemented on a type. This 'new' function creates a new, empty string. 

- 'io::stdin()' is the responsible for calling the 'stdin()' function from the 'io' module.
    -> If we hadn’t imported the io library with use 'std::io;' at the beginning of the program, we could still use the function by writing this function call as 'std::io::stdin'. The stdin function returns an instance of 'std::io::Stdin', which is a type that represents a handle to the standard input for your terminal.

- '.read_line(&mut guess) calls the 'read_line' method on the standard input handle to get input from the user. We’re also passing '&mut guess' as the argument to 'read_line' to tell it what string to store the user input in. The full job of 'read_line' is to take whatever the user types into standard input and append that into a string (without overwriting its contents), so we therefore pass that string as an argument. The string argument needs to be mutable so the method can change the string’s content.
    -> The '&' indicates that this argument is a reference, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times. Like variables, references are immutable by default. Hence, you need to write '&mut guess' rather than '&guess' to make it mutable.

- 'read_line' returns a 'Result' value. 'Result' is an 'enumaration', often called an 'enum', which is a type that can be in one of multiple possible states. Each possible state is called 'variant'. The purpose of these 'Result' types is to encode error-handling information.

- 'Result''s variants are 'Ok' and 'Err'. The Ok variant indicates the operation was successful, and inside Ok is the successfully generated value. The Err variant means the operation failed, and Err contains information about how or why the operation failed.
    -> Values of the 'Result' type, like values of any type, have methods defined on them. An instance of 'Result' has an 'expect' method that you can call.
        -> If this instance is an 'Err' value, 'expect' will cause the program to crash and display the message that you passed as an argument. If the 'read_line' method reutrns an 'Err', it would likely be the result of an error coming from the underlying operating system.
        -> If this instance is an 'Ok' value, 'expect' will take the return value that 'Ok'is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in the user's input.
- If 'expect' isn't called, the program will compile, but you'll ger a warning saying that you haven't used the 'Result' value returned from 'read_line', indicating that the program hasn't handled a possible error.
- The right way to suppress the warning is to actually write error-handling code, but sometimes, what you want is to crash the program, so you can use 'expect'.

- '{}' inside de 'println!' is a placeholder.
- To print the result of an expression, you can do this:
    -> let x = 5;
    -> let y = 10;
    -> println!("x = {5} and y + 2 = {}", y + 2);
        -> Doing so you put the result of 'y + 2' expression inside the final '{}'. That way, the result of that expression would be printed together with the rest of the sentence.

- The first part of the game is done and explained! 
    -> How to read a input and how to print it.


- SECOND PART!

- To generate a random number, you need to use a 'Crate' called 'rand'.
    -> A 'crate' is a collection of Rust source code files. 'rand' crate is a 'library crate', which contains code that is intended to be used in other programs and can't be executed on its own.
    -> To use a crate, it is needed do add to 'Cargo.toml' the name of that crate followed by the version below the '[dependencies]' area. For example: 'rand = "0.8.5"'

- After that, you can build your program. The 'Semantic Versioning' (SemVer) guaranteed that the dependencies' versions, that will be downloaded, will be compatible with eachother.

- The file 'Cargo.lock' is responsible for ensuring reproducible builds for your project. It stores all the dependencies versions that are being used for the project.

- The command 'cargo update' allows you to update any dependencie that has a new version launched. That's done by ignoring what's inside 'Cargo.lock' and figure out all the latest versions that fit your specifications in 'Cargo.toml'.
    -> You can also update the file 'Cargo.toml' by writing manually the new version you want to use. But be careful! The version specified by you can crash the program beacuse this new version can be incompatible with the other dependencies.

- First is added the line 'use rand::Rng;'. The 'Rng' trait defines methods that random number generators implement, and this trait must be in scope to use those methods.
- The command 'rand::thread_rng' is a function that gives the particular random number generator that is going to be used: one that is local to the current thread of execution and is seeded by the operating system.
- 'gen_range' method defines de range of numbers that the generator will use to generate the random number. It takes the form 'start..=end' and is inclusive on the lower and upper bounds, so is needed to specify '1..=100' to request a number between 1 and 100.
- To access the documentation about the Crates and it's methods, you can type in the terminal the command: 'cargo doc --open'.

- Now, to compare the input number with the secret number, you have to add another 'use' statement: 'use std::cmp::Ordering;'.
    -> 'Ordering' is a 'enum' that has the variants 'Less', 'Greater' and 'Equal', used to compare two values.
    -> The 'cmp' method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with. It returns a variant of the 'Ordering' enum. It's being used a 'match' expression to decide what to do next based on which variant of 'Ordering' was returned from the call to 'cmp' with the values in 'guess' and 'secret_number'.

- A 'match' expression is made up of arms. An arm consists of a pattern to match againts, and the code that should be run if the value given to 'match' fits the arm's pattern. Rust takes the value given to 'match' and looks through each arm's pattern in turn. 
    -> The 'match' arm's patterns work as a 'if else' statement of another programming language, for example: the first arm's pattern will be evaluated and so on until the correct one is found. When it's found, the next arm's patterns won't be looked at.

- A common error in Rust is when there are mismatched types. Rust has a strong, static type system. However, it also has a type inference. When you wrote 'let mut guess = String::new()', Rust was able to infer that 'guess' should be a String and didn't make you write the type. The 'secret_number', on the other hand, is a number type. A few of Rust's number types can have a value between 1 and 100: 'i32', a 32-bit number; u32, an unsigned 32-bit number; 'i64', a 64-bit number; as well as others. Unless otherwise specified, Rust defaults to an 'i32', which is the type of 'secret_number' unless you add the type information.
    -> It is needed to convert 'guess' to a real number type variable. That can be done by adding this command: 'let guess: u32 = guess.trim().parse().expect("Please type a number: ");
    -> But doesn't the program already have a 'guess' variable? Yes, it does, but Rust allows you to shadow the previous value of 'guess' with a new one. 'Shadowing' lets us reuse the 'guess' variable name rather then forcing us to create two unique variables.
    -> In the new command, the new variable is binded to the expression 'guess.trim().parse()'. The 'guess' in the expression refers to the original 'guess' variable that contained the input as a string. The 'trim' method on a 'String' instance will eliminate any whitespace at the beginning and end, which is necessary for the comparison between the string and the 'u32', which can only contain numerical data. Another thing is that, after writing the input number, the user must press enter to compute the input, which adds a newline character to the string: 5\n, for instance. The 'trim' method eliminates this '\n' as well.
    -> The 'parse' method on strings converts a string to another type. The 'parse' method will only work on characters that can logically be converted into numbers and so can easily cause errors. Because it might fail, the 'parse' method returns a 'Result' type, much as the 'read_line' method does. This 'Result' will be treated the same way by using the 'expect' method again. If 'parse' returns an 'Err' 'Result' variant because it couldn’t create a number from the string, the expect call will crash the game and print the message we give it. If 'parse' can successfully convert the string to a number, it will return the 'Ok' variant of 'Result', and expect will return the number from the 'Ok' value.

- THID PART!

- To make the user be able to guess different numbers, it is necessary to add a loop to the program.
- The 'loop' keyword creates an infinite loop.

- FOURTH PART!

- To quit the game after winning it, it's necessary to add a 'break' statement inside the 'Equal' comparison.

- FIFTH PART!

- It is important to handle invalid input on a correct way.
- One way to do so, is ignoring the non-number values passed, so the user can continue to guess.
    -> That can be done by adding the 'continue' statement inside the conversion made from string to a number:

            -> let guess: u32 = match guess.trim().parse() {
            ->     Ok(num) => num,
            ->     Err(_) => continue,
            -> };
            
    -> We switch from an 'expect' to a 'match' expression to move from crashing on an error to handling the error. Remember that 'parse' returns a 'Result' type and a 'Result' is an enum that has the variants 'Ok' and 'Err'. We're using a 'match' expression here, as we did with the 'Ordering' result of the 'cmp' method.
        -> If 'parse' is able to successfully turn the string into a number, it will return an 'Ok' value that contains the resultant number. That 'Ok' value will match the first arm’s pattern, and the 'match' expression will just return the 'num' value that parse produced and put inside the 'Ok' value.
        -> If 'parse' is not able to turn the string into a number, it will return an 'Err' value that contains more information about the error. The 'Err' value does not match the 'Ok(num)' pattern in the first 'match' arm, but it does match the 'Err(_)' pattern in the second arm. The underscore, '_', is a catchall value; in this example, we’re saying we want to match all 'Err' values, no matter what information they have inside them. So the program will execute the second arm’s code 'continue', which tells the program to go to the next iteration of the loop and ask for another guess.

*/