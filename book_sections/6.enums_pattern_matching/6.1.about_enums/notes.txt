/*

DEFINING AN ENUM

- Enums give you a way of saying that a value is one of a possible set of values.
- For example:
    -> You need to work with IP Addresses, but there are two different types: V4 and V6.
    -> You know you can't work with both at the same time. 
    -> To solve this issue, you can use an 'enum' (enumeration):

        enum IpAddrKind {
            V4,
            V6,
        }

    -> You can create instances of each of the two variants of IpAddrKind like this:

        -> 'let four = IpAddrKind::V4;'
        -> 'let six = IpAddrKind::V6;'

        -> Note that the variants of the enum are namespaced under its identifier, and we use a double colon to separate the two.
        -> This is useful because now both values 'IpAddrKind::V4' and 'IpAddrKind::V6' are of the same type: 'IpAddrKind'.
        -> You can then, for instance, define a function that takes any 'IpAddrKind':

            -> 'fn route(ip_kind: IpAddrKind) {...}'
        
    -> To store the actual IP Address you could use structs, like this:

        enum IpAddrKind {
            V4,
            V6,
        }

        struct IpAddr {
            kind: IpAddrKind,
            address: String,
        }

        let home = IpAddr {
            kind: IpAddrKind::V4,
            address: String::from("127.0.0.1"),
        };

        let loopback = IpAddr {
            kind: IpAddrKind::V6,
            address: String::from("::1"),
        };

        -> But that's not the best way of doing so.
        -> You could use durectly the 'enum' that you built to store that data in a more concise way.
        -> For example:

            enum IpAddr {
                V4(String),
                V6(String),
            }

            let home = IpAddr::V4(String::from("127.0.0.1"));

            let loopback = IpAddr::V6(String::from("::1"));

    -> A cool thing about enums is that each variant of it becomes a function that constructs an instance of the enum.
    -> That is, 'IpAddr::V4()' is a function call that takes a String argument and returns an instance of the 'IpAddr' type.

    -> There's even more! 
    -> With enums each variant can have different types and amounts of associated data.
    -> For example:

        enum IpAddr {
            V4(u8, u8, u8, u8),
            V6(String),
        }

        let home = IpAddr::V4(127, 0, 0, 1);

        let loopback = IpAddr::V6(String::from("::1"));

- Let's take a look at another example with a wide variety of types embedded in its variants:
    
    enum Message {
        Quit,
        Move { x: i32, y: i32 },
        Write(String),
        ChangeColor(i32, i32, i32),
    }

    -> This enum has four variants with different types:
        -> 'Quit' has no data associated with it at all.
        -> 'Move' has named fields, like a struct does.
        -> 'Write' includes a single String.
        -> 'ChangeColor' includes three i32 values.

    -> A similar approach using structs would turn out like this:

        struct QuitMessage; // unit struct
        struct MoveMessage {
            x: i32,
            y: i32,
        }
        struct WriteMessage(String); // tuple struct
        struct ChangeColorMessage(i32, i32, i32); // tuple struct

    -> But there an issue with the structs approach:
        -> If we used the different structs, each of which has its own type, we couldn’t as easily define a function to take any of these kinds of messages as we could with the 'Message' enum.

- Enums also gives us the possibility of working with methods, such as with structs:

    impl Message {
        fn call(&self) {
            // method body would be defined here
        }
    }

    let m = Message::Write(String::from("hello"));
    m.call();


THE OPTION ENUM AND ITS ADVANTAGE OVER NULL VALUES

- The 'Option' type encodes the very common scenario in which a value could be something or it could be nothing.
    -> For example, if you request the first item in a non-empty list, you would get a value. If you request the first item in an empty list, you would get nothing.

- The problem with 'null' values is that if you try to use a 'null' value as a 'not-null' value, you’ll get an error of some kind.
- Because this 'null' or not-'null' property is pervasive, it’s extremely easy to make this kind of error.

- The problem isn’t really with the concept but with the particular implementation.
- As such, Rust does not have 'nulls', but it does have an enum that can encode the concept of a value being present or absent.
- This enum is 'Option<T>':

    enum Option<T> {
        None,
        Some(T),
    }

- The 'Option<T>' enum is so useful that it’s even included in the prelude; you don’t need to bring it into scope explicitly.
- Its variants are also included in the prelude: you can use 'Some' and 'None' directly without the 'Option::' prefix.
- The 'Option<T>' enum is still just a regular enum, and 'Some(T)' and 'None' are still variants of type 'Option<T>'.

- The '<T>' syntax is a feature of Rust we haven’t talked about yet. It’s a generic type parameter.
- '<T>' means that the 'Some' variant of the 'Option' enum can hold one piece of data of any type, and that each concrete type that gets used in place of 'T' makes the overall 'Option<T>' type a different type.
- Here are some examples of using 'Option' values to hold number types and string types:

    let some_number = Some(5);
    let some_char = Some('e');

    let absent_number: Option<i32> = None;

- Why is having 'Option<T>' any better than having null?
    -> In short, because 'Option<T>' and 'T' (where T can be any type) are different types, the compiler won’t let us use an 'Option<T>' value as if it were definitely a valid value.
    -> For example, this code won’t compile, because it’s trying to add an 'i8' to an 'Option<i8>':

        let x: i8 = 5;
        let y: Option<i8> = Some(5);

        let sum = x + y;

        -> You have to convert an 'Option<T>' to a 'T' before you can perform 'T' operations with it.
        -> Generally, this helps catch one of the most common issues with 'null': assuming that something isn’t 'null' when it actually is.

- In order to have a value that can possibly be 'null', you must explicitly opt in by making the type of that value 'Option<T>'.
- Then, when you use that value, you are required to explicitly handle the case when the value is 'null'.

- So how do you get the 'T' value out of a 'Some' variant when you have a value of type 'Option<T>' so that you can use that value?
    -> The 'Option<T>' enum has a large number of methods that are useful in a variety of situations.

- In general, in order to use an 'Option<T>' value, you want to have code that will handle each variant.
- You want some code that will run only when you have a 'Some(T)' value, and this code is allowed to use the inner 'T'.
- You want some other code to run only if you have a 'None' value, and that code doesn’t have a 'T' value available. 

*/