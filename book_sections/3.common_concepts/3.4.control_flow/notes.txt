/*

CONTROL FLOW:

IF EXPRESSIONS

- For example:

    fn main() {
        let number = 3;

        if number < 5 {
            println!("condition was true");
        } else {
            println!("condition was false");
        }
    }

- Blocks of code associated with the conditions in if expressions are sometimes called arms, just like the arms in match expressions.
- Rust will not automatically try to convert non-Boolean types to a Boolean. You must be explicit and always provide if with a Boolean as its condition.

- To handle multiple conditions:

    fn main() {
        let number = 6;

        if number % 4 == 0 {
            println!("number is divisible by 4");
        } else if number % 3 == 0 {
            println!("number is divisible by 3");
        } else if number % 2 == 0 {
            println!("number is divisible by 2");
        } else {
            println!("number is not divisible by 4, 3, or 2");
        }
    }

- Because if is an expression, we can use it on the right side of a let statement to assign the outcome to a variable.
    -> For example:

        fn main() {
            let condition = true;
            let number = if condition { 5 } else { 6 };

            println!("The value of number is: {number}");
        }

    -> The types inside the '{}' must be equal. '5' is an 'i32' by convention, as well as '6'.
    -> That will end up on an error:

        fn main() {
            let condition = true;

            let number = if condition { 5 } else { "six" };

            println!("The value of number is: {number}");
        }

        -> This wonâ€™t work because variables must have a single type, and Rust needs to know at compile time what type the number variable is, definitively.
        -> Knowing the type of number lets the compiler verify the type is valid everywhere we use number.


REPETITION WITH LOOPS

- Rust has three different types of loops:

    LOOP:

    -> 'loop' tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.
        -> For example:

            fn main() {
                loop {
                    println!("again!");
                }
            }
        
    -> To step off of the 'loop', you can add a 'break' keyword.
    -> To go to the next iteration, you can use the 'continue' keyword.
    -> One of the uses of a loop is to retry an operation you know might fail, such as checking whether a thread has completed its job.
    -> You might also need to pass the result of that operation out of the loop to the rest of your code.
        -> To do this, you can add the value you want returned after the break expression you use to stop the loop; that value will be returned out of the loop so you can use it.
        -> For example:

            fn main() {
                let mut counter = 0;

                let result = loop {
                    counter += 1;

                    if counter == 10 {
                        break counter * 2;
                    }
                };

                println!("The result is {result}");
            }
    
    -> If you have loops within loops, 'break' and 'continue' apply to the innermost loop at that point.
    -> You can optionally specify a 'loop label' on a loop that you can then use with 'break' or 'continue' to specify that those keywords apply to the labeled loop instead of the innermost loop.
    -> Loop labels must begin with a single quote.
        -> For example:

            fn main() {
                let mut count = 0;
                'counting_up: loop { // loop label
                    println!("count = {count}");
                    let mut remaining = 10;

                    loop {
                        println!("remaining = {remaining}");
                        if remaining == 9 {
                            break;
                        }
                        if count == 2 {
                            break 'counting_up;
                        }
                        remaining -= 1;
                    }

                    count += 1;
                }
                println!("End count = {count}");
            }


    FOR:

    -> 'for'
        -> For example:

            fn main() {
                let a = [10, 20, 30, 40, 50];

                for element in a {
                    println!("the value is: {element}");
                }
            }


            fn main() {
                for number in (1..4).rev() { // '.rev()' reverses the range
                    println!("{number}!");
                }
                println!("LIFTOFF!!!");
            }


    WHILE:

    -> 'while' tells Rust to do what's inside the '{}' while the condition is 'true'. 
        -> For example:

            fn main() {
                let mut number = 3;

                while number != 0 {
                    println!("{number}!");

                    number -= 1;
                }

                println!("LIFTOFF!!!");
            }

*/