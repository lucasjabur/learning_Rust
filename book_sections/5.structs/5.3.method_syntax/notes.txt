/*

METHODS

- Methods are similar to function. To declare a method you also need to use the 'fn' keyword and a name, they can have parameters and a return value.
- Unlike functions, methods are defined within the context of a struct (or a enum or a trait object) and their first parameter is 'self', which represents the instance of the struct the method is being called on.
- Changing the code of the rectangle's area using methods would turn out like this:

    #[derive(Debug)]                                                                // outer attribute that will be used in the context of the struct 'Rectangle'
    struct Rectangle {
        width: u32,
        height: u32,
    }

    impl Rectangle {                                                                // implementation block
        fn area(&self) -> u32 {                                                     // definition of the 'method' with 'self' as it's first parameter **
            self.width * self.height
        }
    }

    fn main() {
        let rect1 = Rectangle {                                                     // instance of the Rectangle struct
            width: 30,
            height: 50,
        };

        println!(
            "The area of the rectangle is {} square pixels.",
            rect1.area()                                                            // call to the 'area()' method
        );
    }

    ** -> Instead of using 'rectangle: &Rectangle' [1] as parameter, the method utilize 'self' [2], that is an abreviation of 'self: &Self' [3].
       -> All of them are the same in terms of meaning in this case!

    -> '&self' is being used because we don't want to take ownership, just read the data.
        -> Having a method that takes ownership of the instance by using just 'sefl' is rare.
        -> Tthis technique is utilized usually when the methods transforms 'self' into something else and you want to prevent the caller from using the original instance after the transformation.
    -> '&mut self' would work if we wanted to change the INSTANCE that we've called the method on as part of what the method does.

- The main reason for using methods instead of functions, in addition to providing method syntax and not having to repeat the type of 'self' in every method's signature, is for organization.

- Also, you can give a method the same name as one of the struct's fields:

    impl Rectangle {
        fn width(&self) -> bool {
            self.width > 0
        }
    }

    fn main() {
        let rect1 = Rectangle {
            width: 30,
            height: 50,
        };

        if rect1.width() {
            println!("The rectangle has a nonzero width; it is {}", rect1.width);
        }
    }

- Often, but not always, when we give a method the same name as a field we want it to only return the value in the field and do nothing else.
- Methods like this are called getters.

Obs.:

- Rust doesn’t have an equivalent to the '->' operator.
- Instead, Rust has a feature called 'automatic referencing and dereferencing'.
- Here’s how it works: when you call a method with 'object.something()', Rust automatically adds in '&', '&mut', or '*' so object matches the signature of the method.
    -> This automatic referencing behavior works because methods have a clear receiver—the type of self.
    -> Given the receiver and name of a method, Rust can figure out definitively whether the method is reading ('&self'), mutating ('&mut self'), or consuming ('self').


METHODS WITH MORE PARAMETERS 

- For example:

    impl Rectangle {

        fn area(&self) -> u32 {
            self.width * self.height
        }

        fn can_hold(&self, other: &Rectangle) -> bool {
            other.width <= self.width && other.height <= self.height
        }
    }

    fn main() {
        let rect1 = Rectangle {
            width: 30,
            height: 50,
        };
        let rect2 = Rectangle {
            width: 10,
            height: 40,
        };
        let rect3 = Rectangle {
            width: 60,
            height: 45,
        };

        println!("Can rect1 hold rect2? {}", rect1.can_hold(&rect2));
        println!("Can rect1 hold rect3? {}", rect1.can_hold(&rect3));
    }   

ASSOCIATED FUNCTIONS

- All functions inside an implementation block are called 'associated functions'.
- They differ from methods because they do not have 'self' as its first parameter. That's because they don't need an instance of the type to work with.
    -> 'String::from()' is an example of an associated function.

- Associated functions that aren’t methods are often used for constructors that will return a new instance of the struct.
- These are often called 'new', but 'new' isn’t a special name and isn’t built into the language.
- For example, we could choose to provide an associated function named square that would have one dimension parameter and use that as both width and height, thus making it easier to create a square Rectangle rather than having to specify the same value twice:

    impl Rectangle {
        fn square(size: u32) -> Self {
            Self {
                width: size,
                height: size,
            }
        }
    }

    -> The Self keywords in the return type and in the body of the function are aliases for the type that appears after the 'impl' keyword, which in this case is Rectangle.
    -> To call this associated function, we use the '::' syntax with the struct name; 
        -> 'let sq = Rectangle::square(3);' is an example.

- Each struct is allowed to have multiple 'impl' blocks.
- For example:

    impl Rectangle {
        fn area(&self) -> u32 {
            self.width * self.height
        }
    }

    impl Rectangle {
        fn can_hold(&self, other: &Rectangle) -> bool {
            self.width > other.width && self.height > other.height
        }
    }

*/